#!/usr/bin/env ruby

# This script finds people that might be interested in a patch
# usage: git related <files | rev-list options>

$since = '5-years-ago'
$min_percent = 10
$files = []
$rev_args = []

class Commit

  attr_reader :persons

  def initialize(id)
    @id = id
    @persons = []
  end

  def parse(data)
    in_body = nil
    data.each_line do |line|
      if not in_body
        case line
        when /^author ([^<>]+) <(\S+)> (.+)$/
          @persons << '%s <%s>' % [$1, $2]
        when /^$/
          in_body = true
        end
      else
        if line =~ /^(Signed-off-by|Reviewed-by|Acked-by|Cc): ([^<>]+) <(\S+?)>$/
          @persons << '%s <%s>' % [$2, $3]
        end
      end
    end
    @persons.uniq!
  end

end

class Commits

  def initialize
    @items = {}
    @main_commits = {}
  end

  def size
    @items.size
  end

  def each(&block)
    @items.each(&block)
  end

  def import
    return if @items.empty?
    File.popen(%w[git cat-file --batch], 'r+') do |p|
      p.write(@items.keys.join("\n"))
      p.close_write
      p.each do |line|
        if line =~ /^(\h{40}) commit (\d+)/
          id, len = $1, $2
          data = p.read($2.to_i)
          @items[id].parse(data)
        end
      end
    end
  end

  def get_blame(source, start, len, from)
    return if len == 0
    len ||= 1
    File.popen(['git', 'blame', '--incremental', '-C', '-C',
               '-L', '%u,+%u' % [start, len],
               '--since', $since, from + '^',
               '--', source]) do |p|
      p.each do |line|
        if line =~ /^\h{40}/
          id = $&
          @items[id] ||= Commit.new(id) if not @main_commits.include?(id)
        end
      end
    end
  end

  def scan_patch(f, id = nil)
    source = nil
    f.each do |line|
      case line
      when /^From (\h+) (.+)$/
        id = $1
        @main_commits[id] = true
      when /^---\s+(\S+)/
        source = $1 != '/dev/null' ? $1[2..-1] : nil
      when /^@@ -(\d+)(?:,(\d+))?/
        get_blame(source, $1, $2, id) if source and id
      end
    end
  end

  def from_patches(files)
    files.each do |file|
      File.open(file) do |f|
        scan_patch(f)
      end
    end
  end

  def from_rev_args(args)
    File.popen(%w[git rev-list --reverse] + args) do |p|
      p.each do |e|
        id = e.chomp
        @main_commits[id] = true
        File.popen(%w[git show -C --oneline] + [id]) do |p|
          scan_patch(p, id)
        end
      end
    end
  end

end

ARGV.each do |e|
  if File.exists?(e)
    $files << e
  else
    $rev_args << e
  end
end

commits = Commits.new
if $files.empty?
  commits.from_rev_args($rev_args)
else
  commits.from_patches($files)
end
commits.import

count_per_person = Hash.new(0)

commits.each do |id, commit|
  commit.persons.each do |person|
    count_per_person[person] += 1
  end
end

count_per_person.each do |person, count|
  percent = count.to_f * 100 / commits.size
  next if percent < $min_percent
  puts person
end
